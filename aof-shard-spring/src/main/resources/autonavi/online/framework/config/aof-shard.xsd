<?xml version="1.0" encoding="UTF-8"?>

<xsd:schema xmlns="http://www.autonavi.com/schema/shard"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:tool="http://www.springframework.org/schema/tool"
	targetNamespace="http://www.autonavi.com/schema/shard"
	elementFormDefault="qualified" attributeFormDefault="unqualified">

	<xsd:import namespace="http://www.springframework.org/schema/beans" />
	<xsd:import namespace="http://www.springframework.org/schema/tool" />

	<xsd:element name="dao" type="daoType">
	</xsd:element>
	<xsd:complexType name="daoType">
		<xsd:sequence>
			<xsd:element name="scan" minOccurs="1" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						<![CDATA[ The comma-separated list of packages to scan for annotated components. ]]>
					</xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="include-filter" type="filterType"
							maxOccurs="unbounded" minOccurs="0">
							<xsd:annotation>
								<xsd:documentation>
									<![CDATA[ Controls which eligible types to include for component scanning. ]]>
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="exclude-filter" type="filterType"
							maxOccurs="unbounded" minOccurs="0">
							<xsd:annotation>
								<xsd:documentation>
									<![CDATA[ Controls which eligible types to exclude for component scanning. ]]>
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
					<xsd:attribute name="base-package" type="xsd:string"
						use="required"></xsd:attribute>
					<xsd:attribute name="resource-pattern" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>
							<![CDATA[
							Controls the class files eligible for component detection. Defaults to "**/*.class", the recommended value.
							Consider use of the include-filter and exclude-filter elements for a more fine-grained approach.
							]]>
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="filterType">
		<xsd:attribute name="type" use="required">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[ Controls the type of filtering to apply to the expression. "annotation" indicates an annotation to be present at the type level in target components; "assignable" indicates a class (or interface) that the target components are assignable to (extend/implement); "aspectj" indicates an AspectJ type pattern expression to be matched by the target components; "regex" indicates a regex pattern to be matched by the target components' class names; "custom" indicates a custom implementation of the org.springframework.core.type.TypeFilter interface. Note: This attribute will not be inherited by child bean definitions. Hence, it needs to be specified per concrete bean definition. ]]>
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="annotation" />
					<xsd:enumeration value="assignable" />
					<xsd:enumeration value="aspectj" />
					<xsd:enumeration value="regex" />
					<xsd:enumeration value="custom" />
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="expression" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[ Indicates the filter expression, the type of which is indicated by "type". ]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
</xsd:schema>